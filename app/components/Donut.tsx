// @ts-expect-error currently ignoring types for this small project
const someInvalidCode = someVariable.somethingThatDoesNotExist;

/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 donut-1.glb --draco 
*/
import React from "react";
import { useGLTF } from "@react-three/drei";
import { useThree } from "@react-three/fiber";
import gsap from "gsap";
import { useLayoutEffect } from "react";
import ScrollTrigger from "gsap/dist/ScrollTrigger";

export function Donut(props) {
  gsap.registerPlugin(ScrollTrigger);
  const { nodes, materials } = useGLTF("/3dModel/donut-1.glb");
  const { camera, scene } = useThree();

  // // POSITION CAMERA AND SCENE CONTROL
  // const { cameraPosition, scenePosition, sceneRotation } = useControls({
  //   cameraPosition: {
  //   { x: 6.5, y: 1.8, z: 3.95 },
  //     step: 0.05,
  //   },
  //   scenePosition: {
  //     value: { x: -0.05, y: 0.05, z: 0.0 },
  //     step: 0.05,
  //   },
  //   sceneRotation: {
  //     value:{ x: 0.65, y: -6.55, z: -0.3 },
  //     step: 0.05,
  //   },
  // });

  // useFrame(() => {
  //   camera.position.set(cameraPosition.x, cameraPosition.y, cameraPosition.z);
  //   scene.position.set(scenePosition.x, scenePosition.y, scenePosition.z);
  //   scene.rotation.set(sceneRotation.x, sceneRotation.y, sceneRotation.z);
  // });

  useLayoutEffect(() => {
    // Clear any existing ScrollTriggers to prevent conflicts
    ScrollTrigger.getAll().forEach((st) => st.kill());

    // Create separate timelines for better control
    const tlSectionTwo = gsap.timeline({
      scrollTrigger: {
        trigger: ".sectionTwo",
        start: "top bottom",
        end: "top top",
        scrub: true,
        markers: true,
      },
    });

    const tlSectionThree = gsap.timeline({
      scrollTrigger: {
        trigger: ".sectionThree",
        start: "top bottom",
        end: "top top",
        scrub: true,
        markers: true,
      },
    });

    // Set initial state first (very important)
    gsap.set(camera.position, { x: 2, y: 2.2, z: 3.95 });
    gsap.set(scene.position, { x: 0, y: 0, z: 0 });
    gsap.set(scene.rotation, { x: 0, y: 0, z: 0 });

    // Section Two animations grouped in one timeline
    tlSectionTwo
      .to(
        camera.position,
        {
          x: 6.5,
          y: 1.8,
          z: 3.95,
        },
        "<"
      )
      .to(
        scene.position,
        {
          x: -0.05,
          y: -1.05,
          z: 0,
        },
        "<"
      ) // The "<" makes this animation start at the same time as the previous one
      .to(
        scene.rotation,
        {
          x: 0.65,
          y: -6.55,
          z: -0.3,
        },
        "<"
      );

    // Section Three animations in a separate timeline
    tlSectionThree
      .to(
        camera.position,
        {
          x: 2.7,
          y: 1.8,
          z: 3.95,
        },
        "<"
      )
      .to(
        scene.position,
        {
          x: -0.05,
          y: -0.35,
          z: 0.0,
        },
        "<"
      )
      .to(
        scene.rotation,
        {
          x: 0.6,
          y: -6.7,
          z: -6.35,
        },
        "<"
      );
  });

  return (
    <group
      {...props}
      dispose={null}
      rotation-x={Math.PI * 2.1}
      position={[2, 1, -1]}
    >
      <mesh
        geometry={nodes.vcbjfbu_LOD0_TIER2_000_MatID_1_0.geometry}
        material={materials.Donut_vcbjfbu_Mid}
        scale={0.25}
      />
    </group>
  );
}

useGLTF.preload("/3dModel/donut-1.glb");
